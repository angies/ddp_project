dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(),user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
dbDisconnect(ucscDb);
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
hg19 <- dbConnect(MySQL(),user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
dbDisconnect(ucscDb);
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
exit
hg19 <- dbConnect(MySQL(),user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
dbDisconnect(ucscDb);
head(affyData)
hg19 <- dbConnect(MySQL(),user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
dbDisconnect(hg19);
exit
hg19 <- dbConnect(MySQL(),user="genome", db="hg19",host="genome-mysql.cse.ucsc.edu")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query,n=10);
dbClearResult(query);
dbDisconnect(hg19);
dim(affyMisSmall)
affyMisSmall <- fetch(query,n=10);
hg19 <- dbConnect(MySQL(),user="genome", db="hg19",host="genome-mysql.cse.ucsc.edu")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query,n=10);
affyMisSmall
dbClearResult(query);
dbDisconnect(hg19);
dim(affyMisSmall)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github","85033a0957bba18b5df5")
quit()
?image
set.seed(12345)
par(mar = rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, dataMatrix[, nrow(dataMatrix):1])
?t
image(1:10, 1:40, (dataMatrix)[, nrow(dataMatrix):1])
image(1:10, 1:40, dataMatrix[, nrow(dataMatrix):1])
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar(4,4,1,4))
par(mar=(4,4,1,4))
par(mar=rep(0.2,4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar=rep(3,2))
(0.03*0.75)/((0.03*0.75)+((1-0.03)*(1-0.52)))
(0.03*0.75)/((0.03*0.75)+((1-0.03)*(1-0.52)))*100
(0.3*0.75)/((0.3*0.75)+((1-0.3)*(1-0.52)))*100
.5/(1-.5)
choose(10,9).5^9+ choose(10,10)*.5^10
choose(10,9)*.5^9+ choose(10,10)*.5^10
pbinom(6,size=10,prob=.5,lower.tail=FALSE)
pbinom(10,size=10,prob=.5,lower.tail=FALSE)
pbinom(6,size=10,prob=.5,lower.tail=FALSE)
?pbinom
pbinom(10,size=10,prob=.1,lower.tail=FALSE)
pbinom(6,size=10,prob=.1,lower.tail=FALSE)
pbinom(10,size=10,prob=.1,lower.tail=FALSE)
pbinom(10,size=10,prob=.5,lower.tail=FALSE)
pbinom(9,size=10,prob=.5,lower.tail=FALSE)
pbinom(8,size=10,prob=.5,lower.tail=FALSE)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
?t-test
?test
n <- length(y)
beta1 <- cor(y,x)*sd(y)/sd(x)
beta0 <- mean(y)-beta1*mean(x)
e <- y-beta0-beta1*x
sigma <- sqrt(sum(e^2)/(n-2))
ssx <- sum((x-mean(x))^2)
seBeta0 <- (1/n+mean(x)^2/ssx)^0.5*sigma
seBeta1 <- sigma/sqrt(ssx)
tBeta1 <- beta1/seBeta1
pBeta0 <- 2*pt(abs(tBeta0),df=n-2,lower.tail=FALSE)
tBeta0 <- beta0/seBeta0
tBeta1 <- beta1/seBeta1
pBeta0 <- 2*pt(abs(tBeta0),df=n-2,lower.tail=FALSE)
pBeta1 <- 2*pt(abs(tBeta1),df=n-2,lower.tail=FALSE)
pBeta0
pBeta1
e
lm(y~x)
beta1
beta0
sigma
coefTable <- rbind(c(beta0,seBeta0,tBeta0,pBeta0),c(beta1,seBeta1,tBeta1,pBeta1))
coefTable <- rbind(c(beta0,seBeta0,tBeta0,pBeta0),c(beta1,seBeta1,tBeta1,pBeta1))
colnames(coefTable) <-c("Estimate","Std. Error","t value","P(>|t|)")
rownames(coefTable) <-c("(Intercept)","x")
coefTable
coefTable
beta1
pbeta1
pBeta1
fit <- lm(y~x)
summary(fit)$coefficients
sigma
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
n <- length(y)
beta1 <- cor(y,x)*sd(y)/sd(x)
beta0 <- mean(y)-beta1*mean(x)
e <- y-beta0-beta1*x
sigma <- sqrt(sum(e^2)/(n-2)) #Estimated Residual Variances
sigma
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y~x)
sumCoef <-[1,1] + c(-1,1) * qt(.975,df=fit$df) * sumCoef[1,2]
sumCoef <- summary(fit)$coefficients
sumCoef
sumCoef <-[1,1] + c(-1,1) * qt(.975,df=fit$df) * sumCoef[1,2]
sumCoef[1,1] + c(-1,1) * qt(.975,df=fit$df) * sumCoef[1,2]
sumCoef[1,1]
sumCoef[1,2]
sumCoef[2,1] + c(-1,1) * qt(.975,df=fit$df) * sumCoef[2,2]
?mtcars
fit <- lm(y~x)
x
class(x)
newx <- 3000/1000
class(newx)
predict(fit,newdata=numeric(x=newx))
?predict(fit,newdata=numeric(x=newx))
predict(fit)
fit
newx <- c(x,3000/1000)
newx
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y~x)
x
newx <- c(x,3000/1000)
class(newx)
predict(fit,newdata=(x=newx))
predict(fit,newdata=data.frame(x=newx))
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y~x)
newx <- c(x,3000/1000)
predict(fit,newdata=data.frame(x=newx))
coef(fit)[1]+coef(fit)[2]*newx
class(fit)
fit2 <-predict(fit,newdata=data.frame(x=newx))
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y~x)
newx <- c(x,3000/1000)
fit2 <-predict(fit,newdata=data.frame(x=newx))
class(fit2)
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
newx <- c(x,3000/1000)
fit <- lm(y~newx)
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
newx <- c(x,3000/1000)
newx
fit <- lm(y~newx)
class(x)
class(newx)
x
newx
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
newx <- c(x,3000/1000)
fit2 <- lm(y~newx)
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y~x)
coef(fit)
newx <- c(3000/1000)
coef(fit)[1]+coef(fit)[2]*newx
newx
predict(fit,newdata=data.frame(x=newx))
newxs <- c(x,newx)
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y~x)
newx <- c(3000/1000)
#coef(fit)[1]+coef(fit)[2]*newx
newy <- predict(fit,newdata=data.frame(x=newx))
newxs <- c(x,newx)
yhat <- c(y,newy)
lm(newy~newx)
newx
lm(yhat~newxs)
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y~x)
newx <- c(3000/1000)
#coef(fit)[1]+coef(fit)[2]*newx
newy <- predict(fit,newdata=data.frame(x=newx))
newxs <- c(x,newx)
yhat <- c(y,newy)
fit2 <- lm(yhat~newxs)
sumCoef <- summary(fit2)$coefficients
sumCoef
sumCoef[1,1] + c(-1,1) * qt(.975,df=fit2$df) * sumCoef[1,2]
#[1] 33.45050 41.11975
sumCoef[2,1] + c(-1,1) * qt(.975,df=fit2$df) * sumCoef[2,2]
yhat
fit2~df
fit2$df
fit2
fit2$x
newxs
newy
yhat
y
sumCoef
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
n <- length(y)
beta1 <- cor(y,x)*sd(y)/sd(x)
beta0 <- mean(y)-beta1*mean(x)
e <- y-beta0-beta1*x
sigma <- sqrt(sum(e^2)/(n-2)) #Estimated Residual Variances
ssx <- sum((x-mean(x))^2) #Sum of the Square Xs
seBeta0 <- (1/n+mean(x)^2/ssx)^0.5*sigma
seBeta1 <- sigma/sqrt(ssx)
tBeta0 <- beta0/seBeta0
tBeta1 <- beta1/seBeta1
pBeta0 <- 2*pt(abs(tBeta0),df=n-2,lower.tail=FALSE)
pBeta1 <- 2*pt(abs(tBeta1),df=n-2,lower.tail=FALSE)
coefTable <- rbind(c(beta0,seBeta0,tBeta0,pBeta0),c(beta1,seBeta1,tBeta1,pBeta1))
colnames(coefTable) <-c("Estimate","Std. Error","t value","P(>|t|)")
rownames(coefTable) <-c("(Intercept)","x")
coefTable
pBeta1
fit <- lm(y~x)
summary(fit)$coefficients
x
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y~x)
newx <- c(3000/1000)
#coef(fit)[1]+coef(fit)[2]*newx
newy <- predict(fit,newdata=data.frame(x=newx))
newxs <- c(x,newx)
yhat <- c(y,newy)
fit2 <- lm(yhat~newxs)
sumCoef <- summary(fit2)$coefficients
sumCoef
sumCoef[1,1] + c(-1,1) * qt(.975,df=fit2$df) * sumCoef[1,2]
#[1] 33.53239 41.03786
sumCoef[2,1] + c(-1,1) * qt(.975,df=fit2$df) * sumCoef[2,2]
#[1} -6.465359 -4.223584
newxs
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y~x)
e <- resid(fit)
#newx <- c(3000/1000)
#coef(fit)[1]+coef(fit)[2]*newx
yhat <- predict(fit)
max(abs(e-(y-yhat)))
yhat <- predict(fit,newdata=data.frame(c(x,3))
yhat <- predict(fit,newdata=data.frame(c(x,3)))
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y~x)
e <- resid(fit)
yhat <- predict(fit,newdata=data.frame(x=c(x,3)))
max(abs(e-(y-yhat)))
yhat
y
y
yhat
yhat <- predict(fit,newdata=data.frame(x=3))
yhat
max(abs(e-(y-yhat)))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
# 1. Subset the data to a training set and testing set based on the Case variable in the data set.
#inTrain <- createDataPartition(y = segmentationOriginal$Case, list = FALSE)
train <- subset(segmentationOriginal, Case == "Train")
test <- subset(segmentationOriginal, Case == "Test")
# 2. Set the seed to 125 and fit a CART model with the rpart method using all
# predictor variables and default caret settings.
modFit <- train(Class ~ ., data = train, method = "rpart")
modFit$finalModel
# 3. In the final model what would be the final model prediction for cases with the following variable values:
# Look at the output
# a. TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2 PS
# b. TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100 WS
# c. TotalIntench2 = 57,000; FiberWidthCh1 = 8;VarIntenCh4 = 100 PS
# d. FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2 Not possible to predict
par(mar=c(0.5,1,1,2))
plot(modFit$finalModel, uniform = TRUE, main = "Classification Tree")
text(modFit$finalModel, use.n = TRUE, all = TRUE, cex = .8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit)
predict(modFit, newdata = train)
rep("A", 20)
setwd("~/Escritorio/Curso Developing Data Products/Project/code/rawcode/EnShiny")
?bs
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runExample("01_hello")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/Escritorio/Curso Developing Data Products/Project/code/rawcode/EnShiny")
library(shiny)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?bs
?lm
setwd("~/Escritorio/Curso Developing Data Products/Project/code/rawcode/EnShiny")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?round
shiny::runApp()
shiny::runApp()
x2 <- pi * 100^(-1:3)
round(x2, 3)
signif(x2, 3)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/Escritorio/Curso Developing Data Products/demoApp")
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
library(shinyapps)
runApp()
runApp()
library(shinyapps)
deployApp()
getwd()
shinyapps::deployApp()
shinyapps::deployApp('/demoApp')
library(shinyapps)
shinyapps::setAccountInfo(name='ae2015', token='848B620E34F724AFCD2EF38451EF350D', secret='FD/qbjpUsgirQfyEVDoL4aMx2xbllFyRkWUQV5Uo')
shinyapps::deployApp()
setwd("~/Escritorio/Curso Developing Data Products/Project/code/rawcode/EnShiny")
shiny::runApp()
setwd("~/Escritorio/Curso Developing Data Products/Project/code/predict_pressure")
deployApp()
setwd("~/Escritorio/Curso Developing Data Products/Project/writing")
?pressure
setwd("~/Escritorio/Curso Developing Data Products/Project/presentation/Slidify2")
author("predict_pressure")
author("predict_pressure")
library(slidify)
author("predict_pressure")
slidify('index.Rmd')
getwd()
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
browseURL('index.html')
getwd
getwd()
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
setwd("~/Escritorio/Curso Developing Data Products/Project/writing")
setwd("~/Escritorio/Curso Developing Data Products/Project/code/github")
setwd("~/Escritorio/Curso Developing Data Products/Project/presentation/RPub")
setwd("~/Escritorio/Curso Developing Data Products/Project/presentation/Slidify2Final/RPub/predict_pressure")
slidify('index.Rmd')
browsrURL('index.html')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
